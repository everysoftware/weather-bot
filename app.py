import json
import asyncio

import telebot.async_telebot
import requests

import config
import sql
import subscription


WELCOME_STR = '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, —Å–æ–æ–±—â–∞—é—â–∏–π —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É!'
WEATHER_STR = '–ù–∞–ø–µ—á–∞—Ç–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞.'
INFO_STR = "<b>–ü–æ–≥–æ–¥–∞ ({})</b>\n\n" +\
           "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C {}\n" +\
           "–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {}¬∞C {}\n" +\
           "–î–∞–≤–ª–µ–Ω–∏–µ: {} –≥–ü–∞\n" +\
           "–í–ª–∞–∂–Ω–æ—Å—Ç—å: {}%\n"
NOT_FOUND_STR = '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!'
UNKNOWN_COMMAND_STR = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.'

db = sql.Database('bot.db')
bot = telebot.async_telebot.AsyncTeleBot(config.TG_TOKEN, parse_mode='HTML')


@bot.message_handler(commands=['start'])
async def start_handler(msg):
    try:
        await db.add_user(msg.chat.id, msg.chat.first_name)
    except ValueError:
        pass
    finally:
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton('–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É'))
        markup.add(telebot.types.KeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'))
        await bot.send_message(msg.chat.id, WELCOME_STR, reply_markup=markup)


@bot.message_handler(text=['–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É', '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'])
async def menu_callback(msg):
    if msg.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É':
        await weather_handler(msg)
    elif msg.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        await subscription.main_handler(msg)


@bot.message_handler(commands=['weather'])
async def weather_handler(msg):
    await bot.reply_to(msg, WEATHER_STR)

bot.add_custom_filter(telebot.asyncio_filters.TextMatchFilter())


def get_temp_emoji(temp):
    if temp >= 30:
        return 'üî•'
    elif 10 <= temp < 30:
        return '‚òÄÔ∏è'
    elif -10 <= temp < 10:
        return 'üå¨'
    elif temp < -10:
        return '‚ùÑÔ∏è'


def parse_json(city, response):
    data = json.loads(response.text)
    return INFO_STR.format(city.capitalize(),
                           data['main']['temp'], get_temp_emoji(data['main']['temp']),
                           data['main']['feels_like'], get_temp_emoji(data['main']['feels_like']),
                           data['main']['pressure'],
                           data['main']['humidity']
                           )


@bot.message_handler(commands=['author'])
async def author_handler(msg):
    await bot.send_message(msg.chat.id, '–ê–≤—Ç–æ—Ä –±–æ—Ç–∞: @ivanstasevich')


@bot.message_handler()
async def get_weather(msg):
    city = msg.text.strip().lower()
    response = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&APPID={config.OPEN_WEATHER_KEY}'
                            f'&units=metric')
    text = parse_json(city, response) if response.ok else NOT_FOUND_STR
    await bot.reply_to(msg, text, parse_mode='html')


def main():
    from subscription import bot
    print('Polling...')
    asyncio.run(bot.infinity_polling())


if __name__ == '__main__':
    main()
